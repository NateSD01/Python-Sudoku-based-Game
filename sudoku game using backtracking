import random
import tkinter as tk
from tkinter import messagebox

def is_valid(grid, row, col, num):
    # Check if the number is already in the row
    if num in grid[row]:
        return False
    
    # Check if the number is already in the column
    if num in [grid[i][col] for i in range(9)]:
        return False
    
    # Check if the number is already in the 3x3 subgrid
    start_row, start_col = 3 * (row // 3), 3 * (col // 3)
    for i in range(start_row, start_row + 3):
        for j in range(start_col, start_col + 3):
            if grid[i][j] == num:
                return False
    
    return True

def solve_sudoku(grid):
    empty_cell = find_empty_cell(grid)
    if not empty_cell:
        return True
    
    row, col = empty_cell
    for num in range(1, 10):
        if is_valid(grid, row, col, num):
            grid[row][col] = num
            if solve_sudoku(grid):
                return True
            grid[row][col] = 0
    
    return False

def find_empty_cell(grid):
    for i in range(9):
        for j in range(9):
            if grid[i][j] == 0:
                return (i, j)
    return None

def generate_sudoku():
    grid = [[0] * 9 for _ in range(9)]
    solve_sudoku(grid)
    
    # Remove some numbers to create the puzzle
    num_removed = 0
    while num_removed < 50:  # Adjust the number of removed elements as desired
        row, col = random.randint(0, 8), random.randint(0, 8)
        if grid[row][col] != 0:
            grid[row][col] = 0
            num_removed += 1
    
    return grid

def print_sudoku(grid):
    for row in grid:
        print(" ".join(map(str, row)))

def toggle_fullscreen(root):
    # Toggle between fullscreen and normal size
    state = not root.attributes('-fullscreen')
    root.attributes('-fullscreen', state)

def print_sudoku_gui(grid):
    root = tk.Tk()
    root.title("Sudoku Puzzle")
    
    entries = []
    for i in range(9):
        row_entries = []
        for j in range(9):
            cell_value = grid[i][j]
            if cell_value == 0:
                cell_value = ""
            entry_var = tk.StringVar()
            entry = tk.Entry(root, width=5, font=('Arial', 24), justify="center", textvariable=entry_var)  # Increase font size for better visibility
            entry.grid(row=i, column=j, padx=2, pady=2, sticky="nsew")  # Add padx, pady, and sticky parameters
            entry.insert(tk.END, cell_value)
            row_entries.append(entry_var)
        entries.append(row_entries)
    
    # Create a button to toggle fullscreen mode
    fullscreen_button = tk.Button(root, text="Toggle Fullscreen", command=lambda: toggle_fullscreen(root), font=('Arial', 12))  # Adjust button font size
    fullscreen_button.grid(row=9, column=0, columnspan=9, pady=10, sticky="nsew")  # Add columnspan and sticky parameters
    
    # Create a button to check the solution
    check_button = tk.Button(root, text="Check Solution", command=lambda: check_solution(entries, root))
    check_button.grid(row=10, column=0, columnspan=9, pady=10, sticky="nsew")  # Add columnspan and sticky parameters
    
    # Configure the last two rows and all columns to expand and fill the available space
    for i in range(9, 11):
        root.grid_rowconfigure(i, weight=1)
    for i in range(9):
        root.grid_columnconfigure(i, weight=1)
    
    root.mainloop()

def check_solution(entries, root):
    sudoku_grid = [[int(entry.get()) if entry.get() else 0 for entry in row_entries] for row_entries in entries]
    
    # Check for repeated numbers in rows and columns
    for i in range(9):
        row = [sudoku_grid[i][j] for j in range(9) if sudoku_grid[i][j] != 0]
        col = [sudoku_grid[j][i] for j in range(9) if sudoku_grid[j][i] != 0]
        if len(row) != len(set(row)):
            messagebox.showwarning("Warning", "Repeated number in row {}".format(i+1))
            return
        if len(col) != len(set(col)):
            messagebox.showwarning("Warning", "Repeated number in column {}".format(i+1))
            return
    
    if solve_sudoku(sudoku_grid):
        messagebox.showinfo("Congratulations!", "You've solved the Sudoku puzzle.")
    else:
        messagebox.showerror("Incorrect Solution", "Sorry, the Sudoku puzzle solution is incorrect.")

# Example usage
if __name__ == "__main__":
    sudoku_grid = generate_sudoku()
    print("Generated Sudoku Puzzle:")
    print_sudoku(sudoku_grid)
    print("\nOpening GUI...")
    print_sudoku_gui(sudoku_grid)
